{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"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","sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type { NativeGeocoderPlugin, reverseOptions, ForwardOptions, Adress } from './definitions';\n\ninterface AddressComponent {\n  long_name: string;\n  short_name: string;\n  types: string[];\n}\ninterface GeocoderResult {\n  address_components: AddressComponent[];\n  formatted_address: string;\n  geometry: {\n    location: {\n      lat: number;\n      lng: number;\n    };\n    location_type: string;\n    viewport: {\n      northeast: {\n        lat: number;\n        lng: number;\n      };\n      southwest: {\n        lat: number;\n        lng: number;\n      };\n    };\n  };\n}\ninterface GeocoderPayload {\n  plus_code: {\n    compound_code: string;\n    global_code: string;\n  };\n  results: GeocoderResult[];\n}\n\nconst findAC = (address_components: AddressComponent[], type: string): AddressComponent => {\n  return (\n    address_components.find((component) => component.types.includes(type)) || {\n      long_name: '',\n      short_name: '',\n      types: [],\n    }\n  );\n};\nexport class NativeGeocoderWeb extends WebPlugin implements NativeGeocoderPlugin {\n  async reverseGeocode(options: reverseOptions): Promise<{ addresses: Adress[] }> {\n    if (!options.apiKey) {\n      throw new Error('apiKey is required for web');\n    }\n    const params = {\n      latlng: `${options.latitude},${options.longitude}`,\n      key: options.apiKey,\n      ...(options.defaultLocale && { language: options.defaultLocale }),\n      result_type: 'street_address',\n    };\n    return fetch(`https://maps.googleapis.com/maps/api/geocode/json?${new URLSearchParams(params).toString()}`)\n      .then((response) => response.json())\n      .then((data: GeocoderPayload): { addresses: Adress[] } => {\n        return {\n          addresses: data.results\n            .map((result: GeocoderResult): Adress => {\n              // transform the response in Adress[]\n              // use the restul from google geocoder and transform it in Adress\n\n              return {\n                latitude: result.geometry.location.lat,\n                longitude: result.geometry.location.lng,\n                countryCode: findAC(result.address_components, 'country').short_name,\n                countryName: findAC(result.address_components, 'country').long_name,\n                postalCode: findAC(result.address_components, 'postal_code').long_name,\n                administrativeArea: findAC(result.address_components, 'administrative_area_level_1').long_name,\n                subAdministrativeArea: findAC(result.address_components, 'administrative_area_level_2').long_name,\n                locality: findAC(result.address_components, 'locality').long_name,\n                subLocality: findAC(result.address_components, 'sublocality').long_name,\n                thoroughfare: findAC(result.address_components, 'route').long_name,\n                subThoroughfare: findAC(result.address_components, 'street_number').long_name,\n                areasOfInterest: [],\n              };\n            })\n            .slice(0, options.maxResults || 1),\n        };\n      });\n  }\n  async forwardGeocode(options: ForwardOptions): Promise<{ addresses: Adress[] }> {\n    if (!options.apiKey) {\n      throw new Error('apiKey is required for web');\n    }\n    const params = {\n      address: options.addressString,\n      key: options.apiKey,\n      ...(options.defaultLocale && { language: options.defaultLocale }),\n      result_type: 'street_address',\n    };\n    return fetch(`https://maps.googleapis.com/maps/api/geocode/json?${new URLSearchParams(params).toString()}`)\n      .then((response) => response.json())\n      .then((data: GeocoderPayload): { addresses: Adress[] } => {\n        return {\n          addresses: data.results\n            .map((result: GeocoderResult): Adress => {\n              // transform the response in Adress[]\n              // use the restul from google geocoder and transform it in Adress\n              return {\n                latitude: result.geometry.location.lat,\n                longitude: result.geometry.location.lng,\n                countryCode: findAC(result.address_components, 'country').short_name,\n                countryName: findAC(result.address_components, 'country').long_name,\n                postalCode: findAC(result.address_components, 'postal_code').long_name,\n                administrativeArea: findAC(result.address_components, 'administrative_area_level_1').long_name,\n                subAdministrativeArea: findAC(result.address_components, 'administrative_area_level_2').long_name,\n                locality: findAC(result.address_components, 'locality').long_name,\n                subLocality: findAC(result.address_components, 'sublocality').long_name,\n                thoroughfare: findAC(result.address_components, 'route').long_name,\n                subThoroughfare: findAC(result.address_components, 'street_number').long_name,\n                areasOfInterest: [],\n              };\n            })\n            .slice(0, options.maxResults || 1),\n        };\n      });\n  }\n}\n"]}